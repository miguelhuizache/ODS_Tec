# 05_adaptacion_ventana_miguel_huizache.md

**Integrante:** Miguel Huizache Vázquez  
**Ventana asignada:** **Ventana 5 — `win_canvas.py`**  
**Proyecto:** **NutriTec Foráneo** (hábitos de comida/agua/sueño con semáforo y avatar)

---

## ¿Qué cambié?
Convertí el canvas de “adorno” en un tablero semanal que de verdad dice algo: muestra el sueño promedio de la semana, el conteo de comidas por semáforo (Verdes, Amarillos, Rojos), el agua total (7 días) en mililitros y un emoji de estado (🙂/😐/😴) según el balance y el sueño. Además, tipo app móvil (cards, badges, esquinas redondeadas) usando solo tkinter/ttk, con un un botón “Generar semana demo” que crea datos realistas y refresca la vista al instante, y dejé todo alimentado desde data/logs.json (sin hardcode): si el equipo registra datos, el Canvas los refleja sin tocar nada.

---

## Cómo se usa 
1. Ejecuta la app y entra a **“5) Canvas (Dibujo)”**.  
2. Si no hay datos, presiona **“Generar semana demo”** → se crea `data/logs.json` con 7 días (comidas, agua, sueño).  
3. Mira los **badges** y la **gráfica**:
   - **Verdes/Amarillos/Rojos** = cuántas comidas de cada color.
   - **Sueño prom.** = promedio de horas dormidas esta semana.
   - **Agua (7d)** = mililitros acumulados en los últimos 7 días.
   - **Estado** = 🙂/😐/😴 según tu balance.


## ¿Por qué esto ayuda al proyecto?
- **Te ubica rapidísimo:** en 5 segundos sabes si tu semana va “verde” o “se está yendo al rojo”.
- **Enfocado en lo que importa:** comida (calidad), agua (hidratación) y sueño (descanso).
- **Motiva sin regañar:** el emoji del estado es un empujoncito visual para mejorar mañana.
- **Listo para crecer:** luego podremos conectar foto del plato/alacena y recomendaciones; este tablero ya es el lugar donde se ve el progreso.

---

## Capturas
<img width="1920" height="1020" alt="image" src="https://github.com/user-attachments/assets/60f4fd31-8179-4b88-af29-66f9f5c82b88" />


- **Propuesta / mock:**  
  `https://tu-enlace-o-coloca-la-imagen-aqui.png`

---

## Dónde están mis cambios
``` python
# src/app/win_canvas.py
import tkinter as tk
from tkinter import ttk, messagebox
from pathlib import Path
import json, datetime as dt, random as R

# ---------- Data helpers ----------
REPO = Path(__file__).resolve().parents[2]
DATA = REPO / "data"
LOGS = DATA / "logs.json"

def load_logs():
    if LOGS.exists():
        try:
            return json.loads(LOGS.read_text(encoding="utf-8"))
        except Exception:
            return []
    return []

def save_logs(items):
    DATA.mkdir(parents=True, exist_ok=True)
    LOGS.write_text(json.dumps(items, ensure_ascii=False, indent=2), encoding="utf-8")

def week_range():
    end = dt.datetime.now()
    start = (end - dt.timedelta(days=6)).replace(hour=0, minute=0, second=0, microsecond=0)
    return start, end

def weekly_counts():
    logs = load_logs()
    start, end = week_range()

    def in_range(ts):
        try:
            t = dt.datetime.fromisoformat(ts)
            return start <= t <= end
        except:
            return False

    cnt = {"Verde":0,"Amarillo":0,"Rojo":0}
    agua_ml = 0
    suenos = []
    for l in logs:
        if not in_range(l.get("ts","")): 
            continue
        t = l.get("tipo")
        if t == "Comida":
            s = (l.get("semaforo") or "Rojo").title()
            cnt[s] = cnt.get(s,0)+1
        elif t == "Agua":
            agua_ml += int(l.get("ml",0) or 0)
        elif t == "Sueño":
            try: suenos.append(float(l.get("horas",0) or 0))
            except: pass

    avg_sleep = round(sum(suenos)/len(suenos),1) if suenos else None
    return cnt, agua_ml, avg_sleep

def mascot_emoji(cnts, avg_sleep):
    total = sum(cnts.values())
    score = (cnts["Verde"]*2 + cnts["Amarillo"]*1) / total if total else 0
    if avg_sleep is not None and avg_sleep < 6: return "😴"
    if score >= 1.5: return "🙂"
    if score >= 1.0: return "😐"
    return "😴"

# ---------- Seed demo week ----------
def seed_demo_week():
    """Genera 7 días con comidas/agua/sueño variados (realista)."""
    today = dt.datetime.now().replace(microsecond=0)
    data = []

    # Elegimos 1 día "malo" (más rojo y poco sueño) y 1 "muy bueno"
    bad_day_idx = R.randrange(7)
    good_day_idx = (bad_day_idx + R.randrange(2,7)) % 7

    for d in range(7):
        base = (today - dt.timedelta(days=6-d)).replace(hour=8, minute=0, second=0)
        # comidas por día
        n_meals = R.choice([2,3,3,4])
        # pesos del semáforo
        if d == bad_day_idx:
            weights = {"Verde":1, "Amarillo":2, "Rojo":4}
            sleep_hours = round(R.uniform(4.2, 5.8),1)
        elif d == good_day_idx:
            weights = {"Verde":5, "Amarillo":2, "Rojo":1}
            sleep_hours = round(R.uniform(7.5, 8.8),1)
        else:
            weights = {"Verde":4, "Amarillo":3, "Rojo":2}
            sleep_hours = round(R.uniform(6.2, 7.8),1)

        # comidas
        for i in range(n_meals):
            sem = R.choices(
                population=["Verde","Amarillo","Rojo"],
                weights=[weights["Verde"], weights["Amarillo"], weights["Rojo"]],
                k=1
            )[0]
            ts = (base + dt.timedelta(hours=R.choice([0,4,6,8,12])+R.uniform(0,0.9))).isoformat()
            data.append({"ts": ts, "tipo": "Comida", "semaforo": sem})

        # agua (repartimos en tomas)
        daily_water = R.randrange(1400, 2600, 100)
        remaining = daily_water
        for h in [9, 11, 13, 16, 19]:
            drink = min(remaining, R.choice([200,250,300,350,400]))
            if drink <= 0: break
            remaining -= drink
            ts = (base.replace(hour=h) + dt.timedelta(minutes=R.randrange(0,40))).isoformat()
            data.append({"ts": ts, "tipo": "Agua", "ml": drink})

        # sueño (se registra a las 23:xx)
        ts_sleep = base.replace(hour=23) + dt.timedelta(minutes=R.randrange(0,59))
        data.append({"ts": ts_sleep.isoformat(), "tipo": "Sueño", "horas": sleep_hours})

    save_logs(data)

# ---------- UI helpers ----------
def round_rect(canvas, x1, y1, x2, y2, r=16, **kw):
    r = min(r, (x2-x1)//2, (y2-y1)//2)
    points = [
        x1+r, y1, x2-r, y1, x2, y1, x2, y1+r,
        x2, y2-r, x2, y2, x2-r, y2, x1+r, y2,
        x1, y2, x1, y2-r, x1, y1+r, x1, y1
    ]
    return canvas.create_polygon(points, smooth=True, **kw)

# ---------- Window ----------
def open_win_canvas(parent: tk.Tk):
    # Si no hay logs, sembramos una semana de demo automáticamente
    if not LOGS.exists() or not load_logs():
        seed_demo_week()

    def redraw():
        # redibuja con datos actuales
        wrap.delete("all")
        build_ui()

    def build_ui():
        nonlocal W, H
        # Header
        round_rect(wrap, 0, 0, W, 84, r=18, fill="#FFFFFF", outline="")
        wrap.create_text(16, 20, anchor="w", text="NutriTec", font=("Segoe UI", 16, "bold"), fill="#111")
        cnts, agua_ml, avg_sleep = weekly_counts()
        emoji = mascot_emoji(cnts, avg_sleep)
        wrap.create_text(W-16, 20, anchor="e", text=f"Estado {emoji}", font=("Segoe UI", 12, "bold"), fill="#333")
        wrap.create_text(16, 52, anchor="w", text="Progreso semanal", font=("Segoe UI", 11), fill="#666")

        # Badges line
        y0 = 96
        round_rect(wrap, 0, y0, W, y0+62, r=18, fill="#FFFFFF", outline="")
        def badge(x, label, value, color_fg, color_bg):
            round_rect(wrap, x, y0+12, x+110, y0+50, r=14, fill=color_bg, outline="")
            wrap.create_text(x+12, y0+20, anchor="w", text=label, font=("Segoe UI", 9, "bold"), fill=color_fg)
            wrap.create_text(x+12, y0+36, anchor="w", text=str(value), font=("Segoe UI", 11), fill=color_fg)

        badge(10, "Verdes", cnts["Verde"], "#0E7C0E", "#EAF8EA")
        badge(134, "Amarillos", cnts["Amarillo"], "#A87A00", "#FFF6D9")
        badge(258, "Rojos", cnts["Rojo"], "#B00020", "#FFE3E7")

        y1 = y0 + 74
        round_rect(wrap, 0, y1, W, y1+62, r=18, fill="#FFFFFF", outline="")
        badge(10, "Sueño prom.", f"{avg_sleep or '—'} h", "#1F3B5B", "#E7EEF7")
        badge(210, "Agua (7d)", f"{agua_ml} ml", "#1F3B5B", "#E7EEF7")

        # Card con barras
        y2 = y1 + 74 + 14
        round_rect(wrap, 0, y2, W, y2+300, r=18, fill="#FFFFFF", outline="")
        wrap.create_text(W//2, y2+18, text="Comidas por semáforo", font=("Segoe UI", 12, "bold"), fill="#222")

        # gráfico barras
        gx, gy, gw, gh = 24, y2+46, W-48, 220
        wrap.create_line(gx, gy+gh, gx+gw, gy+gh, fill="#333")
        wrap.create_line(gx, gy, gx, gy+gh, fill="#333")

        values = [cnts["Verde"], cnts["Amarillo"], cnts["Rojo"]]
        labels = ["Verde", "Amarillo", "Rojo"]
        fills  = ["#18A558", "#FFC107", "#FF3B30"]
        maxv = max(values) if any(values) else 1

        gap = 18
        barw = (gw - gap*2) // 3
        for i, v in enumerate(values):
            x0 = gx + i*(barw + gap)
            h  = int( (v/maxv) * (gh-26) )
            yb = gy + gh - h
            round_rect(wrap, x0, yb, x0+barw, gy+gh, r=10, fill=fills[i], outline="")
            wrap.create_text(x0+barw//2, yb-10, text=str(v), font=("Segoe UI", 11, "bold"), fill="#111")
            wrap.create_text(x0+barw//2, gy+gh+16, text=labels[i], font=("Segoe UI", 10), fill="#444")

        # Nota
        wrap.create_text(W//2, y2+300-18,
                         text="Tip: más verdes y ≥6h de sueño mantienen al avatar feliz",
                         font=("Segoe UI", 9), fill="#6B7280")

    # Window + “marco móvil”
    win = tk.Toplevel(parent)
    win.title("NutriTec — Progreso")
    win.configure(bg="#F5F7FB")
    W, H = 390, 720
    win.geometry(f"{W+24}x{H+24}")

    wrap = tk.Canvas(win, width=W, height=H, bg="#F5F7FB", highlightthickness=0)
    wrap.pack(padx=12, pady=12)

    build_ui()

    # botones inferiores reales
    bar = ttk.Frame(win, padding=(0,6))
    bar.pack(fill="x")
    ttk.Button(bar, text="Generar semana demo", command=lambda: (_seed_and_refresh()))\
        .pack(side="left")
    ttk.Button(bar, text="Cerrar", command=win.destroy).pack(side="right")

    try:
        style = ttk.Style(win)
        style.theme_use("clam")
    except:
        pass

    def _seed_and_refresh():
        seed_demo_week()
        messagebox.showinfo("OK", "Semana demo generada 👌")
        redraw()
```

---

## Mini reflexión
pienso que menos es más—con tres señales (comida, agua y sueño) ya se entiende la semana. Además, lo visual sí jala: ver las barras y el emoji te dan ganas de sumar más cosas en verdes y ver que estás yendo bien.

